/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as dashboardRouteImport } from './routes/(dashboard)/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as dashboardIndexImport } from './routes/(dashboard)/index'
import { Route as authSignUpImport } from './routes/(auth)/sign-up'
import { Route as authSignInImport } from './routes/(auth)/sign-in'
import { Route as authResetPasswordImport } from './routes/(auth)/reset-password'
import { Route as authForgotPasswordImport } from './routes/(auth)/forgot-password'
import { Route as PaymentConnectReturnImport } from './routes/payment/connect/return'
import { Route as PaymentConnectRefreshImport } from './routes/payment/connect/refresh'
import { Route as dashboardProductNewImport } from './routes/(dashboard)/product/new'

// Create/Update Routes

const dashboardRouteRoute = dashboardRouteImport.update({
  id: '/(dashboard)',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const dashboardIndexRoute = dashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardRouteRoute,
} as any)

const authSignUpRoute = authSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => authRouteRoute,
} as any)

const authSignInRoute = authSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authRouteRoute,
} as any)

const authResetPasswordRoute = authResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => authRouteRoute,
} as any)

const authForgotPasswordRoute = authForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => authRouteRoute,
} as any)

const PaymentConnectReturnRoute = PaymentConnectReturnImport.update({
  id: '/payment/connect/return',
  path: '/payment/connect/return',
  getParentRoute: () => rootRoute,
} as any)

const PaymentConnectRefreshRoute = PaymentConnectRefreshImport.update({
  id: '/payment/connect/refresh',
  path: '/payment/connect/refresh',
  getParentRoute: () => rootRoute,
} as any)

const dashboardProductNewRoute = dashboardProductNewImport.update({
  id: '/product/new',
  path: '/product/new',
  getParentRoute: () => dashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)': {
      id: '/(dashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/reset-password': {
      id: '/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authResetPasswordImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpImport
      parentRoute: typeof authRouteImport
    }
    '/(dashboard)/': {
      id: '/(dashboard)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardIndexImport
      parentRoute: typeof dashboardRouteImport
    }
    '/(dashboard)/product/new': {
      id: '/(dashboard)/product/new'
      path: '/product/new'
      fullPath: '/product/new'
      preLoaderRoute: typeof dashboardProductNewImport
      parentRoute: typeof dashboardRouteImport
    }
    '/payment/connect/refresh': {
      id: '/payment/connect/refresh'
      path: '/payment/connect/refresh'
      fullPath: '/payment/connect/refresh'
      preLoaderRoute: typeof PaymentConnectRefreshImport
      parentRoute: typeof rootRoute
    }
    '/payment/connect/return': {
      id: '/payment/connect/return'
      path: '/payment/connect/return'
      fullPath: '/payment/connect/return'
      preLoaderRoute: typeof PaymentConnectReturnImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authResetPasswordRoute: typeof authResetPasswordRoute
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authForgotPasswordRoute: authForgotPasswordRoute,
  authResetPasswordRoute: authResetPasswordRoute,
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface dashboardRouteRouteChildren {
  dashboardIndexRoute: typeof dashboardIndexRoute
  dashboardProductNewRoute: typeof dashboardProductNewRoute
}

const dashboardRouteRouteChildren: dashboardRouteRouteChildren = {
  dashboardIndexRoute: dashboardIndexRoute,
  dashboardProductNewRoute: dashboardProductNewRoute,
}

const dashboardRouteRouteWithChildren = dashboardRouteRoute._addFileChildren(
  dashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof dashboardIndexRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/reset-password': typeof authResetPasswordRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/product/new': typeof dashboardProductNewRoute
  '/payment/connect/refresh': typeof PaymentConnectRefreshRoute
  '/payment/connect/return': typeof PaymentConnectReturnRoute
}

export interface FileRoutesByTo {
  '/': typeof dashboardIndexRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/reset-password': typeof authResetPasswordRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/product/new': typeof dashboardProductNewRoute
  '/payment/connect/refresh': typeof PaymentConnectRefreshRoute
  '/payment/connect/return': typeof PaymentConnectReturnRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(dashboard)': typeof dashboardRouteRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/reset-password': typeof authResetPasswordRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/(dashboard)/': typeof dashboardIndexRoute
  '/(dashboard)/product/new': typeof dashboardProductNewRoute
  '/payment/connect/refresh': typeof PaymentConnectRefreshRoute
  '/payment/connect/return': typeof PaymentConnectReturnRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/product/new'
    | '/payment/connect/refresh'
    | '/payment/connect/return'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/product/new'
    | '/payment/connect/refresh'
    | '/payment/connect/return'
  id:
    | '__root__'
    | '/(auth)'
    | '/(dashboard)'
    | '/(auth)/forgot-password'
    | '/(auth)/reset-password'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/(dashboard)/'
    | '/(dashboard)/product/new'
    | '/payment/connect/refresh'
    | '/payment/connect/return'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  dashboardRouteRoute: typeof dashboardRouteRouteWithChildren
  PaymentConnectRefreshRoute: typeof PaymentConnectRefreshRoute
  PaymentConnectReturnRoute: typeof PaymentConnectReturnRoute
}

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  dashboardRouteRoute: dashboardRouteRouteWithChildren,
  PaymentConnectRefreshRoute: PaymentConnectRefreshRoute,
  PaymentConnectReturnRoute: PaymentConnectReturnRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)",
        "/(dashboard)",
        "/payment/connect/refresh",
        "/payment/connect/return"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/forgot-password",
        "/(auth)/reset-password",
        "/(auth)/sign-in",
        "/(auth)/sign-up"
      ]
    },
    "/(dashboard)": {
      "filePath": "(dashboard)/route.tsx",
      "children": [
        "/(dashboard)/",
        "/(dashboard)/product/new"
      ]
    },
    "/(auth)/forgot-password": {
      "filePath": "(auth)/forgot-password.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/reset-password": {
      "filePath": "(auth)/reset-password.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/sign-in": {
      "filePath": "(auth)/sign-in.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/sign-up": {
      "filePath": "(auth)/sign-up.tsx",
      "parent": "/(auth)"
    },
    "/(dashboard)/": {
      "filePath": "(dashboard)/index.tsx",
      "parent": "/(dashboard)"
    },
    "/(dashboard)/product/new": {
      "filePath": "(dashboard)/product/new.tsx",
      "parent": "/(dashboard)"
    },
    "/payment/connect/refresh": {
      "filePath": "payment/connect/refresh.tsx"
    },
    "/payment/connect/return": {
      "filePath": "payment/connect/return.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
